[
{
    "model": "auth.permission",
    "pk": 1,
    "fields": {
        "name": "Can add log entry",
        "content_type": 1,
        "codename": "add_logentry"
    }
},
{
    "model": "auth.permission",
    "pk": 2,
    "fields": {
        "name": "Can change log entry",
        "content_type": 1,
        "codename": "change_logentry"
    }
},
{
    "model": "auth.permission",
    "pk": 3,
    "fields": {
        "name": "Can delete log entry",
        "content_type": 1,
        "codename": "delete_logentry"
    }
},
{
    "model": "auth.permission",
    "pk": 4,
    "fields": {
        "name": "Can view log entry",
        "content_type": 1,
        "codename": "view_logentry"
    }
},
{
    "model": "auth.permission",
    "pk": 5,
    "fields": {
        "name": "Can add permission",
        "content_type": 2,
        "codename": "add_permission"
    }
},
{
    "model": "auth.permission",
    "pk": 6,
    "fields": {
        "name": "Can change permission",
        "content_type": 2,
        "codename": "change_permission"
    }
},
{
    "model": "auth.permission",
    "pk": 7,
    "fields": {
        "name": "Can delete permission",
        "content_type": 2,
        "codename": "delete_permission"
    }
},
{
    "model": "auth.permission",
    "pk": 8,
    "fields": {
        "name": "Can view permission",
        "content_type": 2,
        "codename": "view_permission"
    }
},
{
    "model": "auth.permission",
    "pk": 9,
    "fields": {
        "name": "Can add group",
        "content_type": 3,
        "codename": "add_group"
    }
},
{
    "model": "auth.permission",
    "pk": 10,
    "fields": {
        "name": "Can change group",
        "content_type": 3,
        "codename": "change_group"
    }
},
{
    "model": "auth.permission",
    "pk": 11,
    "fields": {
        "name": "Can delete group",
        "content_type": 3,
        "codename": "delete_group"
    }
},
{
    "model": "auth.permission",
    "pk": 12,
    "fields": {
        "name": "Can view group",
        "content_type": 3,
        "codename": "view_group"
    }
},
{
    "model": "auth.permission",
    "pk": 13,
    "fields": {
        "name": "Can add user",
        "content_type": 4,
        "codename": "add_user"
    }
},
{
    "model": "auth.permission",
    "pk": 14,
    "fields": {
        "name": "Can change user",
        "content_type": 4,
        "codename": "change_user"
    }
},
{
    "model": "auth.permission",
    "pk": 15,
    "fields": {
        "name": "Can delete user",
        "content_type": 4,
        "codename": "delete_user"
    }
},
{
    "model": "auth.permission",
    "pk": 16,
    "fields": {
        "name": "Can view user",
        "content_type": 4,
        "codename": "view_user"
    }
},
{
    "model": "auth.permission",
    "pk": 17,
    "fields": {
        "name": "Can add content type",
        "content_type": 5,
        "codename": "add_contenttype"
    }
},
{
    "model": "auth.permission",
    "pk": 18,
    "fields": {
        "name": "Can change content type",
        "content_type": 5,
        "codename": "change_contenttype"
    }
},
{
    "model": "auth.permission",
    "pk": 19,
    "fields": {
        "name": "Can delete content type",
        "content_type": 5,
        "codename": "delete_contenttype"
    }
},
{
    "model": "auth.permission",
    "pk": 20,
    "fields": {
        "name": "Can view content type",
        "content_type": 5,
        "codename": "view_contenttype"
    }
},
{
    "model": "auth.permission",
    "pk": 21,
    "fields": {
        "name": "Can add session",
        "content_type": 6,
        "codename": "add_session"
    }
},
{
    "model": "auth.permission",
    "pk": 22,
    "fields": {
        "name": "Can change session",
        "content_type": 6,
        "codename": "change_session"
    }
},
{
    "model": "auth.permission",
    "pk": 23,
    "fields": {
        "name": "Can delete session",
        "content_type": 6,
        "codename": "delete_session"
    }
},
{
    "model": "auth.permission",
    "pk": 24,
    "fields": {
        "name": "Can view session",
        "content_type": 6,
        "codename": "view_session"
    }
},
{
    "model": "auth.permission",
    "pk": 25,
    "fields": {
        "name": "Can add author",
        "content_type": 7,
        "codename": "add_author"
    }
},
{
    "model": "auth.permission",
    "pk": 26,
    "fields": {
        "name": "Can change author",
        "content_type": 7,
        "codename": "change_author"
    }
},
{
    "model": "auth.permission",
    "pk": 27,
    "fields": {
        "name": "Can delete author",
        "content_type": 7,
        "codename": "delete_author"
    }
},
{
    "model": "auth.permission",
    "pk": 28,
    "fields": {
        "name": "Can view author",
        "content_type": 7,
        "codename": "view_author"
    }
},
{
    "model": "auth.permission",
    "pk": 29,
    "fields": {
        "name": "Can add chapter",
        "content_type": 8,
        "codename": "add_chapter"
    }
},
{
    "model": "auth.permission",
    "pk": 30,
    "fields": {
        "name": "Can change chapter",
        "content_type": 8,
        "codename": "change_chapter"
    }
},
{
    "model": "auth.permission",
    "pk": 31,
    "fields": {
        "name": "Can delete chapter",
        "content_type": 8,
        "codename": "delete_chapter"
    }
},
{
    "model": "auth.permission",
    "pk": 32,
    "fields": {
        "name": "Can view chapter",
        "content_type": 8,
        "codename": "view_chapter"
    }
},
{
    "model": "auth.permission",
    "pk": 33,
    "fields": {
        "name": "Can add book",
        "content_type": 9,
        "codename": "add_book"
    }
},
{
    "model": "auth.permission",
    "pk": 34,
    "fields": {
        "name": "Can change book",
        "content_type": 9,
        "codename": "change_book"
    }
},
{
    "model": "auth.permission",
    "pk": 35,
    "fields": {
        "name": "Can delete book",
        "content_type": 9,
        "codename": "delete_book"
    }
},
{
    "model": "auth.permission",
    "pk": 36,
    "fields": {
        "name": "Can view book",
        "content_type": 9,
        "codename": "view_book"
    }
},
{
    "model": "auth.permission",
    "pk": 37,
    "fields": {
        "name": "Can add note",
        "content_type": 10,
        "codename": "add_note"
    }
},
{
    "model": "auth.permission",
    "pk": 38,
    "fields": {
        "name": "Can change note",
        "content_type": 10,
        "codename": "change_note"
    }
},
{
    "model": "auth.permission",
    "pk": 39,
    "fields": {
        "name": "Can delete note",
        "content_type": 10,
        "codename": "delete_note"
    }
},
{
    "model": "auth.permission",
    "pk": 40,
    "fields": {
        "name": "Can view note",
        "content_type": 10,
        "codename": "view_note"
    }
},
{
    "model": "auth.permission",
    "pk": 41,
    "fields": {
        "name": "Can add image",
        "content_type": 11,
        "codename": "add_image"
    }
},
{
    "model": "auth.permission",
    "pk": 42,
    "fields": {
        "name": "Can change image",
        "content_type": 11,
        "codename": "change_image"
    }
},
{
    "model": "auth.permission",
    "pk": 43,
    "fields": {
        "name": "Can delete image",
        "content_type": 11,
        "codename": "delete_image"
    }
},
{
    "model": "auth.permission",
    "pk": 44,
    "fields": {
        "name": "Can view image",
        "content_type": 11,
        "codename": "view_image"
    }
},
{
    "model": "auth.user",
    "pk": 1,
    "fields": {
        "password": "pbkdf2_sha256$216000$SENmkKCFT9O6$utgn6zXkVTxZY9ecItDWXtoeKyQ9BSpcdjMzih0CI+A=",
        "last_login": null,
        "is_superuser": false,
        "username": "seaman",
        "first_name": "",
        "last_name": "",
        "email": "me@here.com",
        "is_staff": false,
        "is_active": true,
        "date_joined": "2021-11-15T16:41:42.304Z",
        "groups": [],
        "user_permissions": []
    }
},
{
    "model": "contenttypes.contenttype",
    "pk": 1,
    "fields": {
        "app_label": "admin",
        "model": "logentry"
    }
},
{
    "model": "contenttypes.contenttype",
    "pk": 2,
    "fields": {
        "app_label": "auth",
        "model": "permission"
    }
},
{
    "model": "contenttypes.contenttype",
    "pk": 3,
    "fields": {
        "app_label": "auth",
        "model": "group"
    }
},
{
    "model": "contenttypes.contenttype",
    "pk": 4,
    "fields": {
        "app_label": "auth",
        "model": "user"
    }
},
{
    "model": "contenttypes.contenttype",
    "pk": 5,
    "fields": {
        "app_label": "contenttypes",
        "model": "contenttype"
    }
},
{
    "model": "contenttypes.contenttype",
    "pk": 6,
    "fields": {
        "app_label": "sessions",
        "model": "session"
    }
},
{
    "model": "contenttypes.contenttype",
    "pk": 7,
    "fields": {
        "app_label": "book",
        "model": "author"
    }
},
{
    "model": "contenttypes.contenttype",
    "pk": 8,
    "fields": {
        "app_label": "book",
        "model": "chapter"
    }
},
{
    "model": "contenttypes.contenttype",
    "pk": 9,
    "fields": {
        "app_label": "book",
        "model": "book"
    }
},
{
    "model": "contenttypes.contenttype",
    "pk": 10,
    "fields": {
        "app_label": "book",
        "model": "note"
    }
},
{
    "model": "contenttypes.contenttype",
    "pk": 11,
    "fields": {
        "app_label": "book",
        "model": "image"
    }
},
{
    "model": "book.author",
    "pk": 1,
    "fields": {
        "photo": null,
        "user": 1,
        "name": "Mark Seaman"
    }
},
{
    "model": "book.book",
    "pk": 1,
    "fields": {
        "title": "The Leverage Principle",
        "subtitle": null,
        "author": 1,
        "description": "None",
        "doc_path": "Documents/Leverage"
    }
},
{
    "model": "book.book",
    "pk": 2,
    "fields": {
        "title": "From the Edge of Reality",
        "subtitle": null,
        "author": 1,
        "description": "Mark shares his insights and irony about the absurdity of life.",
        "doc_path": "Documents/Poems"
    }
},
{
    "model": "book.chapter",
    "pk": 1,
    "fields": {
        "book": 1,
        "order": 1,
        "title": "The Leverage Principle",
        "markdown": "# 1 - The Leverage Principle\n\n\n> \"Give me a lever long enough and a fulcrum on which to place it, and I shall \n> move the world.\"\n>\n> ~ Archimedes\n\n---\n\n## Software is Central to Modern Life\n\nIn 2011, Marc Andreessen famously stated that \"Software is Eating the World\".\nEvery industry has experienced a remarkable transformation due to the growing\ndominance of software. Entire industries like bookstores, music stores, movie\nstudios, newspapers, photography, and financial services, have been replaced by\nsoftware-based services. Software is no longer a secondary player - it's the\nmain show and will dictate whether your business succeeds or fails. Business now\nruns 24/7 and software is at the very heart of this amazing revolution.\n\nGreat software systems create business success - they can automate repetitive\ntasks and free up resources to continue innovating in other areas. Humans are\ngreat at solving problems and computers are great at running those solutions.\nWith each problem that is solved, more opportunity is created to deliver greater\nvalue. The business now has a solution that can keep delivering value for an\never decreasing cost. Resources and attention can now pivot to solving the next\nround of business problems. Innovation spawns more innovation and forms a\nproductive feedback loop.\n\nThe reverse is also true - inadequate software can easily destroy an otherwise\nhealthy business. Because software is so central to every aspect of business\ntoday, a company can be crippled by software systems that don't meet the\nbusiness needs.\n\nThink about the national healthcare initiative, healthcare.gov, and its high\nprofile flop. Thousands of hours of planning and development costing millions of\ndollars culminated in a failed deployment of a web application. The failure\ncreated extra scrutiny, loss of credibility, and several key leaders lost their\njobs.\n\nThis drama plays out every day in every industry. Companies, governments, and\nother organizations that don't understand how to develop or purchase software\nsystems that match critical business needs are doomed to struggle. The answer to\nthis threat is to apply the leverage principle to every facet of software\ndevelopment and operations.\n\n\n### Importance of Leverage\n\n\nOne definition of leverage is using something to maximum advantage. The goal for\nevery software development project should be to utilize every asset - everything\nyou've previously built, everything your team learned about the business needs,\nevery skill and bit of expertise in a technology platform. Utilize these\nprevious investments rather than creating them new every single time. No one\ncan afford to rebuild infrastructure that has already been created.\n\n\n## The Leverage Principle - _Best practices produce higher quality software which encourages reuse._\n\n\nSoftware development is expensive and it is far more expensive than it needs to\nbe. To build a software system requires solving thousands of specific\nengineering problems. Each of these problems require some minimum amount of\neffort. This effort is the essential problem cost.\n\nBut the cost of the actual solution can far exceed the essential cost.\nInefficiencies in the development process introduce work that doesn't actually\ncontribute toward the project goals. This cost must be viewed as waste. As much\nas 50% of the ultimate cost of any software development project could be\ncharacterized as waste. Eliminating this waste can allow you to deliver far more\nbusiness value with the same resources.\n\n\n### Cost and Leverage\n\nThere is a direct relationship between the incremental development cost (in\nmoney and time) and the amount of leverage that is achieved. The following graph\nshows how the cost of the next release can be contained by reusing the\nunderstanding from the existing system. High leverage levels require a lot of\ndiscipline that must be acquired over time. But even modest amounts of leverage\ncan have a dramatic impact on the overall development cost.\n\nYou might think that it is hard to achieve high levels of leverage on each new\nproduct cycle, but the opposite is actually true. The leverage is determined by\nthe quality of the software development process which is driven by the extent of\nbest practice usage. There is a compounding effect that applies here - better\nprocesses enable a greater rate of improvement. Each generation will see a\nreduction in the cost based on the developed skill and discipline of the team.\nThere is a double benefit here. Improving software processes produces better\nsoftware in the short term, but it also reduces the cost in future development.\n\nTeams that have already achieved a high amount of leverage will continue to\nimprove their processes at a rapid rate. Organizations that are struggling with\nthe fundamentals of software engineering will find it difficult to realize the\nleverage goals simply because they don't know how to develop software. You can\nexpect your rate of improvement to be relatively consistent over multiple\nproduct generations. This gives you an idea of what to expect for cost\nimprovement over time. The budget contraction for money and time is the truest\nmeasure of leverage.\n\n**Rate of Cost Improvement**\n\n![Rate of process improvement](img/Leverage_Improvement.png)\n\n\n### What Blocks Leverage?\n\nEveryone desires and expects leverage during software development. But when we\nbegin to look at reality, our projects often disappoint us. Why don't we get\nmore leverage? The answer is technical debt. A new project presents us with an\nabundance of problems that must be solved. Each day on the project we are\nworking against this backlog. Each problem that we work on may reveal other\nproblems to solve. We can think about every one of these unsolved problems as a\ndebt that is owed by the project. Eventually we work through the debt and the\nproduct is released to market.\n\nIn practice, we choose to solve some problems while deferring others. Every\ntime we defer an issue for later, we write an IOU that must be paid some day.\nThe best way to measure both assets and debt is hours of engineering required.\nHow many hours will it take for you to resolve the issues on the project? How\nmany hours would it take to build the functionality that you have right now?\nThis gives you a solid metric that accounts for what is good and bad within\nyour software.\n\n\n### Technical Debt Decreases Quality\n\nExcessive technical debt is the primary challenge to quality. Unseen problems\nmultiply and threaten to compromise the integrity of the system. Quality is\noften assumed (of course we write good code!), so very few people will\nappreciate it unless it is missing. Quality is not automatic, it requires hard\nwork. Groups that produce high quality products will continue to do so because\nthey have discovered the required practices that lead them to success.\n\nThe only way to have repeatable results is to monitor and control your technical\ndebt throughout the course of your project. Quality problems propagate - a small\nproblem can grow into a large problem if left unresolved. Bugs reproduce and\ninfest other parts of the system. Unclear designs create more confused code.\nMisunderstood product requirements result in solutions that work \"correctly\" but\naren't usable.\n\nEliminate debt as you go in order to pay the lowest cost. A bug that costs you\nan hour now may cost you a day to fix one week from now. That same defect could\neasily cost you a week of time later in the project. The strategy should be pay\nas you go - clean up every area you visit before moving on.\n\nMake debt a conscious decision - don't accept it automatically. There are real\nsituations that require postponing work until later. Choose that path as a last\nresort and be aware that you will have to pay interest on that work in addition\nto the initial cost.\n\n\n### Many Types of Technical Debt\n\nThere are many types of technical debt. There are different sources of debt that\nshow up in many ways. The actions for solving each type of debt are unique to\nthe problems being addressed. The structure of this book is based on addressing\nthe three main categories of debt:\n\n* Development Concerns - Part 2\n* Operational Concerns - Part 3\n* People/Culture Concerns - Part 4\n\nWe will look at each of these areas from an architect's viewpoint and ask, \"how\ncan we apply best practices to control the level of debt that is accumulated\nover time\"? Paying off technical debt produces the maximum opportunity for\nleverage. Technical debt is eliminated by having better development practices\nthat standardize the approach to common problems. This decreases the number of\nunique problems that must be solved throughout the development cycle. The amount\nof leverage determines the cost of software. Best practices are the most direct\nway to control software cost.\n\n\n## Best Practices\n\nTechnical debt is a trap that will prevent leverage. Establishing standard\npractices is the most effective path to avoid debt. When best practices are\nimplemented throughout the development process, creative energies are focused\nsolely on solving new problems.\n\nMost architects are familiar with the excellent work done in the book, \"Design\nPatterns: Elements of Reusable Object-Oriented Software\". It introduced us to\nthe ideas behind creating a catalog of designs for common problems. We can\nextend this concept to every other aspect of software development. Design\npatterns represent leverage in the design space but we also need leverage when\nit comes to Requirements, Coding, Testing, Skill Management, Project Planning,\nOperations Planning, and Monitoring Techniques.\n\nEvery aspect of development could benefit from producing canned solutions to\ncommon situations. In other words, we need Requirements Patterns, Operational\nPatterns, Skill Management Patterns and others. The goal should be to have a\ncomplete set of process patterns to share knowledge effectively between\ndevelopers.\n\nCreating a catalog of standard practices eliminates the need for each engineer\nto learn the best way to do any given task on their own. The catalog itself\nbecomes a form of leverage allowing you to fully utilize each new trick that is\nlearned. Imagine bringing new team members up to speed by presenting them with a\ncatalog of the best practices they will need to do their job and jumpstart their\nproductivity on the project.\n\n\n### Automatic Response to Common Problems\n\nIf a conscious decision is required to accomplish every task, then the level of\nproductivity will be fairly low. However, work accelerates dramatically when the\nsteps to solve a problem are automatic. Remember learning how to drive? Every\nsingle action required a thoughtful analysis. If we make most development tasks\nautomatic and unconscious then problems will be solved with very little effort.\n\nBest practices teach us to identify the situation and then select the\nappropriate response. The solution is fixed and automatic for any given\nsolution. Of course, being good at selecting and applying the patterns still\ntakes practice. With a standard pattern, the engineer no longer needs to invent\nthe solution, they simple apply it. This can save an enormous amount of time\nover the course of a large project.\n\nFight the pull of \"Not Invented Here\" (NIH). Engineers love to invent so there is\na tendency to invent everything that is necessary on a project. \"Use a standard\ntoolkit\"? \"Not invented here\"! The core flaw in this thinking is that\nengineering resources are being wasted on finding new solutions when existing\nones work just as well. Engineering, at its core, is simply problem solving.\nDeveloping a new product requires that thousands of individual problems be\nsolved. Successful leverage is the ability to identify these problems and\nimplement a solution without solving every technical problem from scratch.\n\n\n### Role of Architect\n\nAccording to Wikipedia, a Software Architect is \"a software expert who makes\nhigh-level design choices and dictates technical standards, including software\ncoding standards, tools, and platforms\". CNN Money adds, \"Great software\narchitects are designers and diplomats. They create innovative and valuable\nprograms, but they also translate highly technical plans into a vision the\nC-suite can understand. They are a crucial link between a company's tech unit\nand management\".\n\nA key role of the architect is to be the primary protector of the software\ndevelopment investment. Leverage is central to achieving the highest level of\nvalue for a reasonable cost. Therefore, the software architect needs to ensure\nthat the architectural design is suitable for the current release and can also\nbe used as the basis for all future releases. This is important for small scale\nsoftware projects but becomes absolutely critical as the size and scope of the\nprojects grow.\n\nArchitects have a primary responsibility to lead the organization's development\npractices. Software development techniques should be constantly improving and\nthe architect steers these efforts. True improvements have to be based on the\ncurrent reality and measurement is a good starting point. A baseline will help\nyou understand your current process and where improvements are needed.\n\n\n### Measure Your Current Leverage\n\nThink about your last four development projects. Estimate the budget in hours\nfor each project. Multiply the extended size of the team by the duration of the\nproject and convert into hours. This gives you a good snapshot of the cost of\nthose projects. Now let's examine the leverage.\n\nBetween each successive budget, what was the percentage reduction? For example,\n20% reduction would correspond to budgets of 1000, 800, 640, 512. You can see\nthat even a modest leverage rate still produces a 50% reduction over four \ngenerations.\n\nNow for the hard part. How similar were the problems that were solved? Very\nsimilar problems can result in an expected leverage opportunity of 90%. This\nis because 90% of the problems that must be solved already have a standard\nsolution that can simply be applied to the new product. Leverage is the \nresult of identifying these problems and solving them in an efficient way.\n\n\n### Setting a Target for Leverage\n\nEach software product is tied to a domain. By exploiting the repetition of\nproblems within a given domain and identifying the common problems and reusable\ncomponents, each new generation of software will require fewer new components to\nbe created.\n\nOn these recent projects, how much leverage was missed? How many problems did\nyou solve for a second time without any real benefit over the previous solution?\nSwitching technologies or programming languages is the type of large change that\ndestroys leverage. If you could time travel, would you make different decisions?\n\nWhen solving each problem, think about the problem itself rather than the\nsolution. How much of the problem is actually different between the generations?\nDoes this correspond with the level of leverage that you were able to achieve?\nIf not, there is a gap that is actually an opportunity. You can speed up\ndevelopment significantly by exploiting more leverage opportunities. This is\nwhere the role of architect is critical to your company's future success.\n\n\n### Reliable Knowledge Transfer \n\nSoftware is about understanding how to solve certain kinds of problems. There\nare many different kinds of knowledge that must be managed to bring software to\nlife. Between each generation of software development there is the potential to\nlose that knowledge. The team then has to reacquire lost knowledge in order to\ncomplete the next product. It is expensive to learn information the first time\nand it is just as expensive to relearn it a second and third time.\n\nLeverage can be viewed as the high-fidelity transfer of understanding from one\nproduct generation to the next. If we can transfer 90% of the understanding from\none product to another then only 10% of the problems must be solved. We would\nexpect this level of leverage to result in a ten times reduction in budget.\n\nLeverage is about knowledge transfer. When knowledge is lost, leverage is lost\ntoo. Changing technologies, product domains, organizational structure, and\nknowledgeable individuals can destroy your leverage potential. Sacrificing\nleverage can easily lead to a bloated budget and a failed product.\n\n\n## Sustainable Development\n\nIf leverage is using something to maximum advantage, our goal is to create a\nrepeatable software development process. An accidental success on one project is\nnice but we want predictable success. This requires a deeper understanding of\nsoftware process. Each generation of development should not only produce solid\nproducts but also advance our development capability.\n\nWinning organizations strike a balance between meeting the immediate needs and\nsolving long-term problems that will meet the future needs of the business. This\nis accomplished by building effective software development capability. Each\nproduct that is produced should make it easier to produce similar products for\nmuch lower cost. Leverage of the software development process is the the surest\npath to sustainable development. Core software capabilities support the business\ngoals, leading to ongoing success.\n\n\n### Productive Improvement Cycle\n\nImprovements have a compounding effect. Each problem that is solved reveals new\nproblems that have been hidden, but the new problems are both smaller and easier\nto solve with the new optimized system. Each iteration of improvement not only\nsolves a real problem, but makes it easier to solve future problems as well.\n\nThis creates a productive feedback loop. The rate of the improvements increases\nwith a compounded benefit. The corollary is also true - a system in decay is\ncaught within a destructive feedback loop. The worse things get, the more\nrapidly they will go bad.\n\nWe can harness this dynamic to create improvements that are easy to justify\nbased on short-term results. The key requirement is to produce results quickly.\nMassive efforts at process improvement frequently fail because the decision\nmakers don't have a value for process - however they do value better product\nresults. The clever architect will focus attention on the product results and\nuse that to justify the process improvements.\n\n\n### Use Metrics to Define Organizational Norms\n\nMany organizations may be content with their current results but they have no\nobjective way of measuring the productivity or quality. Establishing a few\nsimple measurements can have a profound impact on how your team behaves. Begin\nto count a few things that are essential to your success and use this\ninformation to gain more support for your improvements.\n\nIf you show measurable progress from your improvements you can build trust with\nstakeholders and make more changes. This is also helpful for identifying\nneglected problem areas. For example, assume you can show that a particular\nmodule is ten times more complex and producing more bugs than any other module.\nYou then have a clear mandate that this module needs to be replaced.\n\nBuild tools to examine your systems. Pay attention to the pain - it is\nindicating a problem that needs attention. Every disagreement or\nmisunderstanding that happens during the course of a project is pointing you to\nan unsolved problem. Solve the immediate problem and create a standard solution\nat the same time. This solves a problem now and solves it for the future too.\nOver time, an organization can build a very valuable inventory of common\nsolutions.\n\n\n### Seek Leverage as a Primary Goal\n\nAs improvements are made daily to the features, tests, and structure, the\nsoftware will continue to get better and better. Fixing an existing system will\nprevent having to replace it. Constantly monitor the big picture to manage both\nquality and functionality throughout development.\n\nA little cleaner is a little better. You don't need to leap the building in a\nsingle bound but you do need to make a constant series of improvements to the \nsoftware over time.\n\nThe economics of leverage are simple:\n\n* High quality means low cost\n* Low quality means short life\n* Software reflects the team that built it\n* Building best practices of the team extends software life\n\n\n### A Culture of Success\n\nGreat software is produced by great teams. An effective team can be relied upon\nto create amazing software every time. A strong development team can achieve\nthree to four times the results of a mediocre team. Building a winning team\nisn't easy because there are always many challenges that threaten to undermine\nthe effectiveness of the team. Some of these challenges have become so\nentrenched in the organization that they aren't even recognized anymore.\n\nThe chapters in Part 4 are dedicated to exploring the people-related issues that\naffect leverage. Without addressing these topics you won't be able to realize\nthe full benefits of leverage. Your success at development and operations is\ndirectly dependent on your ability to build a healthy culture. How your people\nthink and behave will either support or undermine your business goals and\ntechnical goals. Sustainable development requires building a great place to work\nat the same time great products are being built.\n\n\n## Tale of Two Companies\n\nTo illustrate the Leverage Principle, let us consider two different fictional\ncompanies and how they might apply leverage. We will start with a small scale\napplication and then consider how these same dynamics would apply to much larger\nsoftware development efforts. \n\nGeorge and Linda decide to create a company, Seabreeze Travel, that will manage\nbookings on cruises. They decide to build a simple enterprise application which\nwill be hosted in the cloud. They both have a lot of web development experience\nand are enthused about doing it right this time around. They want to build a\nplatform that can be used long-term to grow their business. Based on their\nprevious experience, they think that an application will require around 1000\nhours of work to build.\n\nMary and James also decide to start a cruise booking company, called Foulwind\nAdventures. They attended a seminar on Agile software methods recently and they\nare very enthusiastic about that approach to development. They believe that\nbeing agile means not writing any documentation or doing any design up front.\nThey select a sprint cycle of one week and load it up with lots of features.\nBecause they have chosen to implement so much functionality they probably won't\nhave time to write tests as part of each sprint but they aren't concerned about\nthat because they plan to hire several testers just prior to the product\nrelease.\n\n### Startup Decisions\n\nAt Seabreeze, Linda begins the work of project planning. She divides the 1000\nhour budget into ten 100-hour sprints. She and George will work together on a\none-week cycle. They expect to be done in around three months. They compose the\nmilestones so that one significant feature is budgeted for each iteration. They\nwill build out each feature fully before starting on the next.\n\nJames is a wizard at coding so he jumps right in to the first chunk of code. At\nFoulwind, they hope to be done in a few weeks. They already have made\ncommitments to others that the code will be released within two months. They are\nfeeling very excited about their impending success. Over the next four weeks\nthey pound away on features and are able to produce about twice the\nfunctionality that Seabreeze is able to accomplish.\n\nAfter about a month, Seabreeze has about one-third of the functionality created.\nEach feature is well-tested with design patterns and strong interfaces. In fact,\nLinda has created an automation framework and language to remotely run \nreservation scenarios from test scripts. They are excited about how this design\nwill adjust to multiple front-ends someday. They currently have no outstanding\ndefects.\n\nBack at Foulwind, Mary has implemented a ton of new features. Of course, she\nhasn't had time to fix all of the quirks but they have saved so much time that\nthey are confident that it will be easy to fix whatever needs to be fixed later.\nMary and James have started working independently to avoid the aggravation of\ncode conflicts - these multiple code streams can be reconciled later. It is\nstarting to bug both of them that they don't agree on the number of spaces and\nvariable naming conventions so they have fallen into the habit of reformatting\nthe code to assert their favorite style.\n\nAt three months both companies release code. Foulwind was aiming for a two-\nmonth cycle but just couldn't pull it off. There were lots of strange behaviors\nthat required a lot of debugging to resolve. They hope things are better now,\nbut you never really know. Both companies end up with fairly good releases and\ncustomers begin to flock to the systems.\n\n\n### Second Release\n\nAfter a month of operations both companies are missing key business needs. They\nwere both missing two critical features and are having problems with scaling to\nthe unexpected user demand. Linda looks over the new functionality that is\nneeded and determines that they already have 80% of what is needed for the\nsecond release. Seabreeze immediately starts work on the new release by working\non two weekly sprints. Two weeks and 200 hours later they have a new release for\ncustomers.\n\nAt Foulwind there are lots of defects, which is OK because new software is\nalways buggy. Customers are complaining about performance but the architecture\ndoesn't really support scaling. In fact, a new set of tools and database\nstructure may be needed to address the performance needs. All of these factors\ntogether make it difficult to reuse the existing application code. But both\nJames and Mary believe that reuse is important so they push forward.\n\nBy the time they get to the second release they need to spend an additional\nbudget of 300 hours to maintain the existing system. The new functionality\nrequired about 700 hours to build since there was only an opportunity to\nleverage about 30% of the previous design work. The concept of the sprint was\nabandoned because it is easier to just work on the most urgent issues which\nseem to vary every day. Foulwind's second release required 1000 hours of effort\nand three months.\n\nThe third release follows the same trend. Seabreeze is able to spend another 200\nhours over two weeks to update their software. They are already thinking in\nterms of continuous delivery. Why not just release every two weeks?\n\nFoulwind is starting to believe that they may have the wrong tools. They are\nstill having performance problems and decide to switch web frameworks. They\ndecide to switch from ASP and C#, to Ruby on Rails. They both like new\ntechnology so they believe this will be a good change of pace. The third release\nis a complete reset and requires 1000 hours over three months.\n\nAs they compare the results of the second and third releases, they realize the\ncost is the same. Both releases cost 1000 hours so they conclude there is no\nbenefit from leverage. \"Reuse is a myth! Let's rewrite from scratch each time\".\nWhile this approach does have some merits, it is based on a fallacy.\n\n\n### Comparison of Results\n\nThe following table shows the comparison for the results produced by the two\ncompanies. The two companies start with the same level of performance. But over\ntime the productivity diverges dramatically. Within three product cycles there\nis a cost difference of five times for each incremental release.\n\n**Economics of Leverage**\n\n|Release|Seabreeze Cost|Foulwind Cost|\n|----|-------|--------|\n|#1|1000 in 3 months | 1000 in 3 months|\n|#2|200 in 0.5 months | 1000 in 3 months|\n|#3|200 in 0.5 months | 1000 in 3 months|\n|Total|1400 in 4 months | 3000 in 9 months|\n|Leverage|80% leverage | 0% leverage|\n\n\nThis illustrates the Leverage Principle. Trying to leverage a system with high\ntechnical debt is impossible. If the software is that bad it's much simpler to\nreplace the system entirely.\n\n\n## Best Practice #1 - _Make leverage your primary goal._\n\n\n***Problem***<br>\nThe key to controlling cost is fully utilizing knowledge that you already\npossess. The understanding of the customer needs, product domain, technology,\ntools, architecture, common problems, test strategies, and release process are\nvital to the next software project. Learning and mastering all of these areas\nrequires a large amount of effort. A product that fully leverages that knowledge\nrequires far less time and money and results in a very high quality product.\n\nYet, most projects don't leverage any significant amount in each project cycle.\nKnowledge is lost or discarded and must be reacquired at a high cost to the\nproject. The fundamental problem is that leverage is an afterthought and not\nreally built into the primary project goals.\n\nSigns of poor leverage include: \n\n* Development work is often repeated\n* Knowledge of how to build the system is frequently lost\n* Legacy code becomes very brittle over time\n* Unable to reuse software because of rigidity\n\n\n***Solution***<br>\nThe solution to this waste is to build leverage into your core project plan.\nDefine all other project goals to optimize the amount of knowledge that can be\napplied. Avoid the wasted effort that is required to relearn things that you\nalready know.\n\nMake a list of the knowledge assets that you already possess and the new ones\nthat are required to complete the project. Build your project planning to\naccount for learning the missing essential knowledge. Learning is a significant\ninvestment so work to fill the learning gap early in the project cycle and then\ncreate experiments to validate your learning. Verify key assumptions that could\nthreaten leverage.\n\n***Next Steps***\n\n* Identify the critical types of technical debt\n* Build an inventory of best practices\n* Plan necessary process improvements\n* Build multi-generation product plans with optimal leverage\n\n",
        "html": "<h1>1 - The Leverage Principle</h1>\n<blockquote>\n<p>\"Give me a lever long enough and a fulcrum on which to place it, and I shall \nmove the world.\"</p>\n<p>~ Archimedes</p>\n</blockquote>\n<hr />\n<h2>Software is Central to Modern Life</h2>\n<p>In 2011, Marc Andreessen famously stated that \"Software is Eating the World\".\nEvery industry has experienced a remarkable transformation due to the growing\ndominance of software. Entire industries like bookstores, music stores, movie\nstudios, newspapers, photography, and financial services, have been replaced by\nsoftware-based services. Software is no longer a secondary player - it's the\nmain show and will dictate whether your business succeeds or fails. Business now\nruns 24/7 and software is at the very heart of this amazing revolution.</p>\n<p>Great software systems create business success - they can automate repetitive\ntasks and free up resources to continue innovating in other areas. Humans are\ngreat at solving problems and computers are great at running those solutions.\nWith each problem that is solved, more opportunity is created to deliver greater\nvalue. The business now has a solution that can keep delivering value for an\never decreasing cost. Resources and attention can now pivot to solving the next\nround of business problems. Innovation spawns more innovation and forms a\nproductive feedback loop.</p>\n<p>The reverse is also true - inadequate software can easily destroy an otherwise\nhealthy business. Because software is so central to every aspect of business\ntoday, a company can be crippled by software systems that don't meet the\nbusiness needs.</p>\n<p>Think about the national healthcare initiative, healthcare.gov, and its high\nprofile flop. Thousands of hours of planning and development costing millions of\ndollars culminated in a failed deployment of a web application. The failure\ncreated extra scrutiny, loss of credibility, and several key leaders lost their\njobs.</p>\n<p>This drama plays out every day in every industry. Companies, governments, and\nother organizations that don't understand how to develop or purchase software\nsystems that match critical business needs are doomed to struggle. The answer to\nthis threat is to apply the leverage principle to every facet of software\ndevelopment and operations.</p>\n<h3>Importance of Leverage</h3>\n<p>One definition of leverage is using something to maximum advantage. The goal for\nevery software development project should be to utilize every asset - everything\nyou've previously built, everything your team learned about the business needs,\nevery skill and bit of expertise in a technology platform. Utilize these\nprevious investments rather than creating them new every single time. No one\ncan afford to rebuild infrastructure that has already been created.</p>\n<h2>The Leverage Principle - <em>Best practices produce higher quality software which encourages reuse.</em></h2>\n<p>Software development is expensive and it is far more expensive than it needs to\nbe. To build a software system requires solving thousands of specific\nengineering problems. Each of these problems require some minimum amount of\neffort. This effort is the essential problem cost.</p>\n<p>But the cost of the actual solution can far exceed the essential cost.\nInefficiencies in the development process introduce work that doesn't actually\ncontribute toward the project goals. This cost must be viewed as waste. As much\nas 50% of the ultimate cost of any software development project could be\ncharacterized as waste. Eliminating this waste can allow you to deliver far more\nbusiness value with the same resources.</p>\n<h3>Cost and Leverage</h3>\n<p>There is a direct relationship between the incremental development cost (in\nmoney and time) and the amount of leverage that is achieved. The following graph\nshows how the cost of the next release can be contained by reusing the\nunderstanding from the existing system. High leverage levels require a lot of\ndiscipline that must be acquired over time. But even modest amounts of leverage\ncan have a dramatic impact on the overall development cost.</p>\n<p>You might think that it is hard to achieve high levels of leverage on each new\nproduct cycle, but the opposite is actually true. The leverage is determined by\nthe quality of the software development process which is driven by the extent of\nbest practice usage. There is a compounding effect that applies here - better\nprocesses enable a greater rate of improvement. Each generation will see a\nreduction in the cost based on the developed skill and discipline of the team.\nThere is a double benefit here. Improving software processes produces better\nsoftware in the short term, but it also reduces the cost in future development.</p>\n<p>Teams that have already achieved a high amount of leverage will continue to\nimprove their processes at a rapid rate. Organizations that are struggling with\nthe fundamentals of software engineering will find it difficult to realize the\nleverage goals simply because they don't know how to develop software. You can\nexpect your rate of improvement to be relatively consistent over multiple\nproduct generations. This gives you an idea of what to expect for cost\nimprovement over time. The budget contraction for money and time is the truest\nmeasure of leverage.</p>\n<p><strong>Rate of Cost Improvement</strong></p>\n<p><img alt=\"Rate of process improvement\" src=\"img/Leverage_Improvement.png\" /></p>\n<h3>What Blocks Leverage?</h3>\n<p>Everyone desires and expects leverage during software development. But when we\nbegin to look at reality, our projects often disappoint us. Why don't we get\nmore leverage? The answer is technical debt. A new project presents us with an\nabundance of problems that must be solved. Each day on the project we are\nworking against this backlog. Each problem that we work on may reveal other\nproblems to solve. We can think about every one of these unsolved problems as a\ndebt that is owed by the project. Eventually we work through the debt and the\nproduct is released to market.</p>\n<p>In practice, we choose to solve some problems while deferring others. Every\ntime we defer an issue for later, we write an IOU that must be paid some day.\nThe best way to measure both assets and debt is hours of engineering required.\nHow many hours will it take for you to resolve the issues on the project? How\nmany hours would it take to build the functionality that you have right now?\nThis gives you a solid metric that accounts for what is good and bad within\nyour software.</p>\n<h3>Technical Debt Decreases Quality</h3>\n<p>Excessive technical debt is the primary challenge to quality. Unseen problems\nmultiply and threaten to compromise the integrity of the system. Quality is\noften assumed (of course we write good code!), so very few people will\nappreciate it unless it is missing. Quality is not automatic, it requires hard\nwork. Groups that produce high quality products will continue to do so because\nthey have discovered the required practices that lead them to success.</p>\n<p>The only way to have repeatable results is to monitor and control your technical\ndebt throughout the course of your project. Quality problems propagate - a small\nproblem can grow into a large problem if left unresolved. Bugs reproduce and\ninfest other parts of the system. Unclear designs create more confused code.\nMisunderstood product requirements result in solutions that work \"correctly\" but\naren't usable.</p>\n<p>Eliminate debt as you go in order to pay the lowest cost. A bug that costs you\nan hour now may cost you a day to fix one week from now. That same defect could\neasily cost you a week of time later in the project. The strategy should be pay\nas you go - clean up every area you visit before moving on.</p>\n<p>Make debt a conscious decision - don't accept it automatically. There are real\nsituations that require postponing work until later. Choose that path as a last\nresort and be aware that you will have to pay interest on that work in addition\nto the initial cost.</p>\n<h3>Many Types of Technical Debt</h3>\n<p>There are many types of technical debt. There are different sources of debt that\nshow up in many ways. The actions for solving each type of debt are unique to\nthe problems being addressed. The structure of this book is based on addressing\nthe three main categories of debt:</p>\n<ul>\n<li>Development Concerns - Part 2</li>\n<li>Operational Concerns - Part 3</li>\n<li>People/Culture Concerns - Part 4</li>\n</ul>\n<p>We will look at each of these areas from an architect's viewpoint and ask, \"how\ncan we apply best practices to control the level of debt that is accumulated\nover time\"? Paying off technical debt produces the maximum opportunity for\nleverage. Technical debt is eliminated by having better development practices\nthat standardize the approach to common problems. This decreases the number of\nunique problems that must be solved throughout the development cycle. The amount\nof leverage determines the cost of software. Best practices are the most direct\nway to control software cost.</p>\n<h2>Best Practices</h2>\n<p>Technical debt is a trap that will prevent leverage. Establishing standard\npractices is the most effective path to avoid debt. When best practices are\nimplemented throughout the development process, creative energies are focused\nsolely on solving new problems.</p>\n<p>Most architects are familiar with the excellent work done in the book, \"Design\nPatterns: Elements of Reusable Object-Oriented Software\". It introduced us to\nthe ideas behind creating a catalog of designs for common problems. We can\nextend this concept to every other aspect of software development. Design\npatterns represent leverage in the design space but we also need leverage when\nit comes to Requirements, Coding, Testing, Skill Management, Project Planning,\nOperations Planning, and Monitoring Techniques.</p>\n<p>Every aspect of development could benefit from producing canned solutions to\ncommon situations. In other words, we need Requirements Patterns, Operational\nPatterns, Skill Management Patterns and others. The goal should be to have a\ncomplete set of process patterns to share knowledge effectively between\ndevelopers.</p>\n<p>Creating a catalog of standard practices eliminates the need for each engineer\nto learn the best way to do any given task on their own. The catalog itself\nbecomes a form of leverage allowing you to fully utilize each new trick that is\nlearned. Imagine bringing new team members up to speed by presenting them with a\ncatalog of the best practices they will need to do their job and jumpstart their\nproductivity on the project.</p>\n<h3>Automatic Response to Common Problems</h3>\n<p>If a conscious decision is required to accomplish every task, then the level of\nproductivity will be fairly low. However, work accelerates dramatically when the\nsteps to solve a problem are automatic. Remember learning how to drive? Every\nsingle action required a thoughtful analysis. If we make most development tasks\nautomatic and unconscious then problems will be solved with very little effort.</p>\n<p>Best practices teach us to identify the situation and then select the\nappropriate response. The solution is fixed and automatic for any given\nsolution. Of course, being good at selecting and applying the patterns still\ntakes practice. With a standard pattern, the engineer no longer needs to invent\nthe solution, they simple apply it. This can save an enormous amount of time\nover the course of a large project.</p>\n<p>Fight the pull of \"Not Invented Here\" (NIH). Engineers love to invent so there is\na tendency to invent everything that is necessary on a project. \"Use a standard\ntoolkit\"? \"Not invented here\"! The core flaw in this thinking is that\nengineering resources are being wasted on finding new solutions when existing\nones work just as well. Engineering, at its core, is simply problem solving.\nDeveloping a new product requires that thousands of individual problems be\nsolved. Successful leverage is the ability to identify these problems and\nimplement a solution without solving every technical problem from scratch.</p>\n<h3>Role of Architect</h3>\n<p>According to Wikipedia, a Software Architect is \"a software expert who makes\nhigh-level design choices and dictates technical standards, including software\ncoding standards, tools, and platforms\". CNN Money adds, \"Great software\narchitects are designers and diplomats. They create innovative and valuable\nprograms, but they also translate highly technical plans into a vision the\nC-suite can understand. They are a crucial link between a company's tech unit\nand management\".</p>\n<p>A key role of the architect is to be the primary protector of the software\ndevelopment investment. Leverage is central to achieving the highest level of\nvalue for a reasonable cost. Therefore, the software architect needs to ensure\nthat the architectural design is suitable for the current release and can also\nbe used as the basis for all future releases. This is important for small scale\nsoftware projects but becomes absolutely critical as the size and scope of the\nprojects grow.</p>\n<p>Architects have a primary responsibility to lead the organization's development\npractices. Software development techniques should be constantly improving and\nthe architect steers these efforts. True improvements have to be based on the\ncurrent reality and measurement is a good starting point. A baseline will help\nyou understand your current process and where improvements are needed.</p>\n<h3>Measure Your Current Leverage</h3>\n<p>Think about your last four development projects. Estimate the budget in hours\nfor each project. Multiply the extended size of the team by the duration of the\nproject and convert into hours. This gives you a good snapshot of the cost of\nthose projects. Now let's examine the leverage.</p>\n<p>Between each successive budget, what was the percentage reduction? For example,\n20% reduction would correspond to budgets of 1000, 800, 640, 512. You can see\nthat even a modest leverage rate still produces a 50% reduction over four \ngenerations.</p>\n<p>Now for the hard part. How similar were the problems that were solved? Very\nsimilar problems can result in an expected leverage opportunity of 90%. This\nis because 90% of the problems that must be solved already have a standard\nsolution that can simply be applied to the new product. Leverage is the \nresult of identifying these problems and solving them in an efficient way.</p>\n<h3>Setting a Target for Leverage</h3>\n<p>Each software product is tied to a domain. By exploiting the repetition of\nproblems within a given domain and identifying the common problems and reusable\ncomponents, each new generation of software will require fewer new components to\nbe created.</p>\n<p>On these recent projects, how much leverage was missed? How many problems did\nyou solve for a second time without any real benefit over the previous solution?\nSwitching technologies or programming languages is the type of large change that\ndestroys leverage. If you could time travel, would you make different decisions?</p>\n<p>When solving each problem, think about the problem itself rather than the\nsolution. How much of the problem is actually different between the generations?\nDoes this correspond with the level of leverage that you were able to achieve?\nIf not, there is a gap that is actually an opportunity. You can speed up\ndevelopment significantly by exploiting more leverage opportunities. This is\nwhere the role of architect is critical to your company's future success.</p>\n<h3>Reliable Knowledge Transfer</h3>\n<p>Software is about understanding how to solve certain kinds of problems. There\nare many different kinds of knowledge that must be managed to bring software to\nlife. Between each generation of software development there is the potential to\nlose that knowledge. The team then has to reacquire lost knowledge in order to\ncomplete the next product. It is expensive to learn information the first time\nand it is just as expensive to relearn it a second and third time.</p>\n<p>Leverage can be viewed as the high-fidelity transfer of understanding from one\nproduct generation to the next. If we can transfer 90% of the understanding from\none product to another then only 10% of the problems must be solved. We would\nexpect this level of leverage to result in a ten times reduction in budget.</p>\n<p>Leverage is about knowledge transfer. When knowledge is lost, leverage is lost\ntoo. Changing technologies, product domains, organizational structure, and\nknowledgeable individuals can destroy your leverage potential. Sacrificing\nleverage can easily lead to a bloated budget and a failed product.</p>\n<h2>Sustainable Development</h2>\n<p>If leverage is using something to maximum advantage, our goal is to create a\nrepeatable software development process. An accidental success on one project is\nnice but we want predictable success. This requires a deeper understanding of\nsoftware process. Each generation of development should not only produce solid\nproducts but also advance our development capability.</p>\n<p>Winning organizations strike a balance between meeting the immediate needs and\nsolving long-term problems that will meet the future needs of the business. This\nis accomplished by building effective software development capability. Each\nproduct that is produced should make it easier to produce similar products for\nmuch lower cost. Leverage of the software development process is the the surest\npath to sustainable development. Core software capabilities support the business\ngoals, leading to ongoing success.</p>\n<h3>Productive Improvement Cycle</h3>\n<p>Improvements have a compounding effect. Each problem that is solved reveals new\nproblems that have been hidden, but the new problems are both smaller and easier\nto solve with the new optimized system. Each iteration of improvement not only\nsolves a real problem, but makes it easier to solve future problems as well.</p>\n<p>This creates a productive feedback loop. The rate of the improvements increases\nwith a compounded benefit. The corollary is also true - a system in decay is\ncaught within a destructive feedback loop. The worse things get, the more\nrapidly they will go bad.</p>\n<p>We can harness this dynamic to create improvements that are easy to justify\nbased on short-term results. The key requirement is to produce results quickly.\nMassive efforts at process improvement frequently fail because the decision\nmakers don't have a value for process - however they do value better product\nresults. The clever architect will focus attention on the product results and\nuse that to justify the process improvements.</p>\n<h3>Use Metrics to Define Organizational Norms</h3>\n<p>Many organizations may be content with their current results but they have no\nobjective way of measuring the productivity or quality. Establishing a few\nsimple measurements can have a profound impact on how your team behaves. Begin\nto count a few things that are essential to your success and use this\ninformation to gain more support for your improvements.</p>\n<p>If you show measurable progress from your improvements you can build trust with\nstakeholders and make more changes. This is also helpful for identifying\nneglected problem areas. For example, assume you can show that a particular\nmodule is ten times more complex and producing more bugs than any other module.\nYou then have a clear mandate that this module needs to be replaced.</p>\n<p>Build tools to examine your systems. Pay attention to the pain - it is\nindicating a problem that needs attention. Every disagreement or\nmisunderstanding that happens during the course of a project is pointing you to\nan unsolved problem. Solve the immediate problem and create a standard solution\nat the same time. This solves a problem now and solves it for the future too.\nOver time, an organization can build a very valuable inventory of common\nsolutions.</p>\n<h3>Seek Leverage as a Primary Goal</h3>\n<p>As improvements are made daily to the features, tests, and structure, the\nsoftware will continue to get better and better. Fixing an existing system will\nprevent having to replace it. Constantly monitor the big picture to manage both\nquality and functionality throughout development.</p>\n<p>A little cleaner is a little better. You don't need to leap the building in a\nsingle bound but you do need to make a constant series of improvements to the \nsoftware over time.</p>\n<p>The economics of leverage are simple:</p>\n<ul>\n<li>High quality means low cost</li>\n<li>Low quality means short life</li>\n<li>Software reflects the team that built it</li>\n<li>Building best practices of the team extends software life</li>\n</ul>\n<h3>A Culture of Success</h3>\n<p>Great software is produced by great teams. An effective team can be relied upon\nto create amazing software every time. A strong development team can achieve\nthree to four times the results of a mediocre team. Building a winning team\nisn't easy because there are always many challenges that threaten to undermine\nthe effectiveness of the team. Some of these challenges have become so\nentrenched in the organization that they aren't even recognized anymore.</p>\n<p>The chapters in Part 4 are dedicated to exploring the people-related issues that\naffect leverage. Without addressing these topics you won't be able to realize\nthe full benefits of leverage. Your success at development and operations is\ndirectly dependent on your ability to build a healthy culture. How your people\nthink and behave will either support or undermine your business goals and\ntechnical goals. Sustainable development requires building a great place to work\nat the same time great products are being built.</p>\n<h2>Tale of Two Companies</h2>\n<p>To illustrate the Leverage Principle, let us consider two different fictional\ncompanies and how they might apply leverage. We will start with a small scale\napplication and then consider how these same dynamics would apply to much larger\nsoftware development efforts. </p>\n<p>George and Linda decide to create a company, Seabreeze Travel, that will manage\nbookings on cruises. They decide to build a simple enterprise application which\nwill be hosted in the cloud. They both have a lot of web development experience\nand are enthused about doing it right this time around. They want to build a\nplatform that can be used long-term to grow their business. Based on their\nprevious experience, they think that an application will require around 1000\nhours of work to build.</p>\n<p>Mary and James also decide to start a cruise booking company, called Foulwind\nAdventures. They attended a seminar on Agile software methods recently and they\nare very enthusiastic about that approach to development. They believe that\nbeing agile means not writing any documentation or doing any design up front.\nThey select a sprint cycle of one week and load it up with lots of features.\nBecause they have chosen to implement so much functionality they probably won't\nhave time to write tests as part of each sprint but they aren't concerned about\nthat because they plan to hire several testers just prior to the product\nrelease.</p>\n<h3>Startup Decisions</h3>\n<p>At Seabreeze, Linda begins the work of project planning. She divides the 1000\nhour budget into ten 100-hour sprints. She and George will work together on a\none-week cycle. They expect to be done in around three months. They compose the\nmilestones so that one significant feature is budgeted for each iteration. They\nwill build out each feature fully before starting on the next.</p>\n<p>James is a wizard at coding so he jumps right in to the first chunk of code. At\nFoulwind, they hope to be done in a few weeks. They already have made\ncommitments to others that the code will be released within two months. They are\nfeeling very excited about their impending success. Over the next four weeks\nthey pound away on features and are able to produce about twice the\nfunctionality that Seabreeze is able to accomplish.</p>\n<p>After about a month, Seabreeze has about one-third of the functionality created.\nEach feature is well-tested with design patterns and strong interfaces. In fact,\nLinda has created an automation framework and language to remotely run \nreservation scenarios from test scripts. They are excited about how this design\nwill adjust to multiple front-ends someday. They currently have no outstanding\ndefects.</p>\n<p>Back at Foulwind, Mary has implemented a ton of new features. Of course, she\nhasn't had time to fix all of the quirks but they have saved so much time that\nthey are confident that it will be easy to fix whatever needs to be fixed later.\nMary and James have started working independently to avoid the aggravation of\ncode conflicts - these multiple code streams can be reconciled later. It is\nstarting to bug both of them that they don't agree on the number of spaces and\nvariable naming conventions so they have fallen into the habit of reformatting\nthe code to assert their favorite style.</p>\n<p>At three months both companies release code. Foulwind was aiming for a two-\nmonth cycle but just couldn't pull it off. There were lots of strange behaviors\nthat required a lot of debugging to resolve. They hope things are better now,\nbut you never really know. Both companies end up with fairly good releases and\ncustomers begin to flock to the systems.</p>\n<h3>Second Release</h3>\n<p>After a month of operations both companies are missing key business needs. They\nwere both missing two critical features and are having problems with scaling to\nthe unexpected user demand. Linda looks over the new functionality that is\nneeded and determines that they already have 80% of what is needed for the\nsecond release. Seabreeze immediately starts work on the new release by working\non two weekly sprints. Two weeks and 200 hours later they have a new release for\ncustomers.</p>\n<p>At Foulwind there are lots of defects, which is OK because new software is\nalways buggy. Customers are complaining about performance but the architecture\ndoesn't really support scaling. In fact, a new set of tools and database\nstructure may be needed to address the performance needs. All of these factors\ntogether make it difficult to reuse the existing application code. But both\nJames and Mary believe that reuse is important so they push forward.</p>\n<p>By the time they get to the second release they need to spend an additional\nbudget of 300 hours to maintain the existing system. The new functionality\nrequired about 700 hours to build since there was only an opportunity to\nleverage about 30% of the previous design work. The concept of the sprint was\nabandoned because it is easier to just work on the most urgent issues which\nseem to vary every day. Foulwind's second release required 1000 hours of effort\nand three months.</p>\n<p>The third release follows the same trend. Seabreeze is able to spend another 200\nhours over two weeks to update their software. They are already thinking in\nterms of continuous delivery. Why not just release every two weeks?</p>\n<p>Foulwind is starting to believe that they may have the wrong tools. They are\nstill having performance problems and decide to switch web frameworks. They\ndecide to switch from ASP and C#, to Ruby on Rails. They both like new\ntechnology so they believe this will be a good change of pace. The third release\nis a complete reset and requires 1000 hours over three months.</p>\n<p>As they compare the results of the second and third releases, they realize the\ncost is the same. Both releases cost 1000 hours so they conclude there is no\nbenefit from leverage. \"Reuse is a myth! Let's rewrite from scratch each time\".\nWhile this approach does have some merits, it is based on a fallacy.</p>\n<h3>Comparison of Results</h3>\n<p>The following table shows the comparison for the results produced by the two\ncompanies. The two companies start with the same level of performance. But over\ntime the productivity diverges dramatically. Within three product cycles there\nis a cost difference of five times for each incremental release.</p>\n<p><strong>Economics of Leverage</strong></p>\n<p>|Release|Seabreeze Cost|Foulwind Cost|\n|----|-------|--------|\n|#1|1000 in 3 months | 1000 in 3 months|\n|#2|200 in 0.5 months | 1000 in 3 months|\n|#3|200 in 0.5 months | 1000 in 3 months|\n|Total|1400 in 4 months | 3000 in 9 months|\n|Leverage|80% leverage | 0% leverage|</p>\n<p>This illustrates the Leverage Principle. Trying to leverage a system with high\ntechnical debt is impossible. If the software is that bad it's much simpler to\nreplace the system entirely.</p>\n<h2>Best Practice #1 - <em>Make leverage your primary goal.</em></h2>\n<p><strong><em>Problem</em></strong><br>\nThe key to controlling cost is fully utilizing knowledge that you already\npossess. The understanding of the customer needs, product domain, technology,\ntools, architecture, common problems, test strategies, and release process are\nvital to the next software project. Learning and mastering all of these areas\nrequires a large amount of effort. A product that fully leverages that knowledge\nrequires far less time and money and results in a very high quality product.</p>\n<p>Yet, most projects don't leverage any significant amount in each project cycle.\nKnowledge is lost or discarded and must be reacquired at a high cost to the\nproject. The fundamental problem is that leverage is an afterthought and not\nreally built into the primary project goals.</p>\n<p>Signs of poor leverage include: </p>\n<ul>\n<li>Development work is often repeated</li>\n<li>Knowledge of how to build the system is frequently lost</li>\n<li>Legacy code becomes very brittle over time</li>\n<li>Unable to reuse software because of rigidity</li>\n</ul>\n<p><strong><em>Solution</em></strong><br>\nThe solution to this waste is to build leverage into your core project plan.\nDefine all other project goals to optimize the amount of knowledge that can be\napplied. Avoid the wasted effort that is required to relearn things that you\nalready know.</p>\n<p>Make a list of the knowledge assets that you already possess and the new ones\nthat are required to complete the project. Build your project planning to\naccount for learning the missing essential knowledge. Learning is a significant\ninvestment so work to fill the learning gap early in the project cycle and then\ncreate experiments to validate your learning. Verify key assumptions that could\nthreaten leverage.</p>\n<p><strong><em>Next Steps</em></strong></p>\n<ul>\n<li>Identify the critical types of technical debt</li>\n<li>Build an inventory of best practices</li>\n<li>Plan necessary process improvements</li>\n<li>Build multi-generation product plans with optimal leverage</li>\n</ul>",
        "document": "01.md"
    }
},
{
    "model": "book.chapter",
    "pk": 2,
    "fields": {
        "book": 1,
        "order": 2,
        "title": "Technical Debt",
        "markdown": "",
        "html": "",
        "document": "02.md"
    }
},
{
    "model": "book.chapter",
    "pk": 3,
    "fields": {
        "book": 1,
        "order": 3,
        "title": "Best Practices = Leverage",
        "markdown": "",
        "html": "",
        "document": "03.md"
    }
},
{
    "model": "book.chapter",
    "pk": 4,
    "fields": {
        "book": 1,
        "order": 4,
        "title": "Technology Leverage",
        "markdown": "",
        "html": "",
        "document": "04.md"
    }
},
{
    "model": "book.chapter",
    "pk": 5,
    "fields": {
        "book": 1,
        "order": 5,
        "title": "Architectural Leverage",
        "markdown": "",
        "html": "",
        "document": "05.md"
    }
},
{
    "model": "book.chapter",
    "pk": 6,
    "fields": {
        "book": 1,
        "order": 6,
        "title": "Code Leverage",
        "markdown": "",
        "html": "",
        "document": "06.md"
    }
},
{
    "model": "book.chapter",
    "pk": 7,
    "fields": {
        "book": 1,
        "order": 7,
        "title": "Test Leverage",
        "markdown": "",
        "html": "",
        "document": "07.md"
    }
},
{
    "model": "book.chapter",
    "pk": 8,
    "fields": {
        "book": 1,
        "order": 8,
        "title": "Release Cycles",
        "markdown": "",
        "html": "",
        "document": "08.md"
    }
},
{
    "model": "book.chapter",
    "pk": 9,
    "fields": {
        "book": 1,
        "order": 9,
        "title": "Services Architecture",
        "markdown": "",
        "html": "",
        "document": "09.md"
    }
},
{
    "model": "book.chapter",
    "pk": 10,
    "fields": {
        "book": 1,
        "order": 10,
        "title": "Application Deployment",
        "markdown": "",
        "html": "",
        "document": "10.md"
    }
},
{
    "model": "book.chapter",
    "pk": 11,
    "fields": {
        "book": 1,
        "order": 11,
        "title": "Monitoring Operations",
        "markdown": "",
        "html": "",
        "document": "11.md"
    }
},
{
    "model": "book.chapter",
    "pk": 12,
    "fields": {
        "book": 1,
        "order": 12,
        "title": "Knowledge Management",
        "markdown": "",
        "html": "",
        "document": "12.md"
    }
},
{
    "model": "book.chapter",
    "pk": 13,
    "fields": {
        "book": 1,
        "order": 13,
        "title": "Teamwork",
        "markdown": "",
        "html": "",
        "document": "13.md"
    }
},
{
    "model": "book.chapter",
    "pk": 14,
    "fields": {
        "book": 1,
        "order": 14,
        "title": "Learning",
        "markdown": "",
        "html": "",
        "document": "14.md"
    }
},
{
    "model": "book.chapter",
    "pk": 15,
    "fields": {
        "book": 2,
        "order": 1,
        "title": "From the Edge of Reality",
        "markdown": "",
        "html": "",
        "document": "FromTheEdge.md"
    }
},
{
    "model": "book.chapter",
    "pk": 16,
    "fields": {
        "book": 2,
        "order": 2,
        "title": "Mother Nature",
        "markdown": "",
        "html": "",
        "document": "Part1.md"
    }
},
{
    "model": "book.chapter",
    "pk": 17,
    "fields": {
        "book": 2,
        "order": 3,
        "title": "My Back Yard",
        "markdown": "",
        "html": "",
        "document": "BackYard.md"
    }
},
{
    "model": "book.chapter",
    "pk": 18,
    "fields": {
        "book": 2,
        "order": 4,
        "title": "The Dawn",
        "markdown": "",
        "html": "",
        "document": "Dawn.md"
    }
},
{
    "model": "book.chapter",
    "pk": 19,
    "fields": {
        "book": 2,
        "order": 5,
        "title": "The Eagle",
        "markdown": "",
        "html": "",
        "document": "Eagle.md"
    }
},
{
    "model": "book.chapter",
    "pk": 20,
    "fields": {
        "book": 2,
        "order": 6,
        "title": "First Ones",
        "markdown": "",
        "html": "",
        "document": "FirstOnes.md"
    }
},
{
    "model": "book.chapter",
    "pk": 21,
    "fields": {
        "book": 2,
        "order": 7,
        "title": "Sea of Glass",
        "markdown": "",
        "html": "",
        "document": "SeaOfGlass.md"
    }
},
{
    "model": "book.chapter",
    "pk": 22,
    "fields": {
        "book": 2,
        "order": 8,
        "title": "Morning Coffee",
        "markdown": "",
        "html": "",
        "document": "Coffee.md"
    }
},
{
    "model": "book.chapter",
    "pk": 23,
    "fields": {
        "book": 2,
        "order": 9,
        "title": "In the Moonlight",
        "markdown": "",
        "html": "",
        "document": "Moonlight.md"
    }
},
{
    "model": "book.chapter",
    "pk": 24,
    "fields": {
        "book": 2,
        "order": 10,
        "title": "Mauna Kea at First Light",
        "markdown": "",
        "html": "",
        "document": "MaunaKea.md"
    }
},
{
    "model": "book.chapter",
    "pk": 25,
    "fields": {
        "book": 2,
        "order": 11,
        "title": "Sunset",
        "markdown": "",
        "html": "",
        "document": "Sunset.md"
    }
},
{
    "model": "book.chapter",
    "pk": 26,
    "fields": {
        "book": 2,
        "order": 12,
        "title": "Sunrise",
        "markdown": "",
        "html": "",
        "document": "Sunrise.md"
    }
},
{
    "model": "book.chapter",
    "pk": 27,
    "fields": {
        "book": 2,
        "order": 13,
        "title": "Human Nature",
        "markdown": "",
        "html": "",
        "document": "Part2.md"
    }
},
{
    "model": "book.chapter",
    "pk": 28,
    "fields": {
        "book": 2,
        "order": 14,
        "title": "Deep and Wide",
        "markdown": "",
        "html": "",
        "document": "DeepWide.md"
    }
},
{
    "model": "book.chapter",
    "pk": 29,
    "fields": {
        "book": 2,
        "order": 15,
        "title": "I Miss You",
        "markdown": "",
        "html": "",
        "document": "MissYou.md"
    }
},
{
    "model": "book.chapter",
    "pk": 30,
    "fields": {
        "book": 2,
        "order": 16,
        "title": "Control Issues",
        "markdown": "",
        "html": "",
        "document": "Control.md"
    }
},
{
    "model": "book.chapter",
    "pk": 31,
    "fields": {
        "book": 2,
        "order": 17,
        "title": "Gift of Today",
        "markdown": "",
        "html": "",
        "document": "GiftOfToday.md"
    }
},
{
    "model": "book.chapter",
    "pk": 32,
    "fields": {
        "book": 2,
        "order": 18,
        "title": "Running on Empty",
        "markdown": "",
        "html": "",
        "document": "RunningEmpty.md"
    }
},
{
    "model": "book.chapter",
    "pk": 33,
    "fields": {
        "book": 2,
        "order": 19,
        "title": "Principles of Happiness",
        "markdown": "",
        "html": "",
        "document": "Happiness.md"
    }
},
{
    "model": "book.chapter",
    "pk": 34,
    "fields": {
        "book": 2,
        "order": 20,
        "title": "Food Fun",
        "markdown": "",
        "html": "",
        "document": "FoodFun.md"
    }
},
{
    "model": "book.chapter",
    "pk": 35,
    "fields": {
        "book": 2,
        "order": 21,
        "title": "One True Love",
        "markdown": "",
        "html": "",
        "document": "TrueLove.md"
    }
},
{
    "model": "book.chapter",
    "pk": 36,
    "fields": {
        "book": 2,
        "order": 22,
        "title": "12 Days of Valentine",
        "markdown": "",
        "html": "",
        "document": "Valentine.md"
    }
},
{
    "model": "book.chapter",
    "pk": 37,
    "fields": {
        "book": 2,
        "order": 23,
        "title": "After the Coma",
        "markdown": "",
        "html": "",
        "document": "Coma.md"
    }
},
{
    "model": "book.chapter",
    "pk": 38,
    "fields": {
        "book": 2,
        "order": 24,
        "title": "Mansplaining",
        "markdown": "",
        "html": "",
        "document": "Mansplaining.md"
    }
},
{
    "model": "book.chapter",
    "pk": 39,
    "fields": {
        "book": 2,
        "order": 25,
        "title": "When Darkness Comes",
        "markdown": "",
        "html": "",
        "document": "Darkness.md"
    }
},
{
    "model": "book.chapter",
    "pk": 40,
    "fields": {
        "book": 2,
        "order": 26,
        "title": "The Night We Met",
        "markdown": "",
        "html": "",
        "document": "NightWeMet.md"
    }
},
{
    "model": "book.chapter",
    "pk": 41,
    "fields": {
        "book": 2,
        "order": 27,
        "title": "Year of Tears",
        "markdown": "",
        "html": "",
        "document": "Tears.md"
    }
},
{
    "model": "book.chapter",
    "pk": 42,
    "fields": {
        "book": 2,
        "order": 28,
        "title": "Stubbed",
        "markdown": "",
        "html": "",
        "document": "Stub.md"
    }
},
{
    "model": "book.chapter",
    "pk": 43,
    "fields": {
        "book": 2,
        "order": 29,
        "title": "Touched With Fire",
        "markdown": "",
        "html": "",
        "document": "TouchedWithFire.md"
    }
},
{
    "model": "book.chapter",
    "pk": 44,
    "fields": {
        "book": 2,
        "order": 30,
        "title": "The Beast",
        "markdown": "",
        "html": "",
        "document": "Beast.md"
    }
},
{
    "model": "book.chapter",
    "pk": 45,
    "fields": {
        "book": 2,
        "order": 31,
        "title": "Herd Nature",
        "markdown": "",
        "html": "",
        "document": "Part3.md"
    }
},
{
    "model": "book.chapter",
    "pk": 46,
    "fields": {
        "book": 2,
        "order": 32,
        "title": "The Pacifist",
        "markdown": "",
        "html": "",
        "document": "Pacifist.md"
    }
},
{
    "model": "book.chapter",
    "pk": 47,
    "fields": {
        "book": 2,
        "order": 33,
        "title": "Born For This",
        "markdown": "",
        "html": "",
        "document": "BornForThis.md"
    }
},
{
    "model": "book.chapter",
    "pk": 48,
    "fields": {
        "book": 2,
        "order": 34,
        "title": "The Right Order",
        "markdown": "",
        "html": "",
        "document": "RightOrder.md"
    }
},
{
    "model": "book.chapter",
    "pk": 49,
    "fields": {
        "book": 2,
        "order": 35,
        "title": "Descent Into Hatred",
        "markdown": "",
        "html": "",
        "document": "Hatred.md"
    }
},
{
    "model": "book.chapter",
    "pk": 50,
    "fields": {
        "book": 2,
        "order": 36,
        "title": "Generation Gap",
        "markdown": "",
        "html": "",
        "document": "Generation.md"
    }
},
{
    "model": "book.chapter",
    "pk": 51,
    "fields": {
        "book": 2,
        "order": 37,
        "title": "Lord of the Amazon",
        "markdown": "",
        "html": "",
        "document": "Amazon.md"
    }
},
{
    "model": "book.chapter",
    "pk": 52,
    "fields": {
        "book": 2,
        "order": 38,
        "title": "The Emperor Has Fallen",
        "markdown": "",
        "html": "",
        "document": "Emperor.md"
    }
},
{
    "model": "book.chapter",
    "pk": 53,
    "fields": {
        "book": 2,
        "order": 39,
        "title": "Holders of Wealth",
        "markdown": "",
        "html": "",
        "document": "Wealth.md"
    }
},
{
    "model": "book.chapter",
    "pk": 54,
    "fields": {
        "book": 2,
        "order": 40,
        "title": "I Don't Believe It",
        "markdown": "",
        "html": "",
        "document": "DontBelieve.md"
    }
},
{
    "model": "book.chapter",
    "pk": 55,
    "fields": {
        "book": 2,
        "order": 41,
        "title": "Two Kinds of People",
        "markdown": "",
        "html": "",
        "document": "TwoKindsOfPeople.md"
    }
},
{
    "model": "book.chapter",
    "pk": 56,
    "fields": {
        "book": 2,
        "order": 42,
        "title": "Spiritual Nature",
        "markdown": "",
        "html": "",
        "document": "Part4.md"
    }
},
{
    "model": "book.chapter",
    "pk": 57,
    "fields": {
        "book": 2,
        "order": 43,
        "title": "American Jesus",
        "markdown": "",
        "html": "",
        "document": "AmericanJesus.md"
    }
},
{
    "model": "book.chapter",
    "pk": 58,
    "fields": {
        "book": 2,
        "order": 44,
        "title": "Hour of the Wolves",
        "markdown": "",
        "html": "",
        "document": "Wolves.md"
    }
},
{
    "model": "book.chapter",
    "pk": 59,
    "fields": {
        "book": 2,
        "order": 45,
        "title": "Two Invitations",
        "markdown": "",
        "html": "",
        "document": "Invitations.md"
    }
},
{
    "model": "book.chapter",
    "pk": 60,
    "fields": {
        "book": 2,
        "order": 46,
        "title": "Fruit that Lasts",
        "markdown": "",
        "html": "",
        "document": "Fruit.md"
    }
},
{
    "model": "book.chapter",
    "pk": 61,
    "fields": {
        "book": 2,
        "order": 47,
        "title": "Step Into the Dark",
        "markdown": "",
        "html": "",
        "document": "StepIntoDark.md"
    }
},
{
    "model": "book.chapter",
    "pk": 62,
    "fields": {
        "book": 2,
        "order": 48,
        "title": "Living My Now",
        "markdown": "",
        "html": "",
        "document": "Now.md"
    }
},
{
    "model": "book.chapter",
    "pk": 63,
    "fields": {
        "book": 2,
        "order": 49,
        "title": "Learning to Grieve",
        "markdown": "",
        "html": "",
        "document": "Grief.md"
    }
},
{
    "model": "book.chapter",
    "pk": 64,
    "fields": {
        "book": 2,
        "order": 50,
        "title": "Go with God",
        "markdown": "",
        "html": "",
        "document": "GoWithGod.md"
    }
},
{
    "model": "book.chapter",
    "pk": 65,
    "fields": {
        "book": 2,
        "order": 51,
        "title": "What is a Mother?",
        "markdown": "",
        "html": "",
        "document": "Mother.md"
    }
},
{
    "model": "book.chapter",
    "pk": 66,
    "fields": {
        "book": 2,
        "order": 52,
        "title": "Never a Straight Line",
        "markdown": "",
        "html": "",
        "document": "StraightLine.md"
    }
},
{
    "model": "book.chapter",
    "pk": 67,
    "fields": {
        "book": 2,
        "order": 53,
        "title": "Good News?",
        "markdown": "",
        "html": "",
        "document": "GoodNews.md"
    }
},
{
    "model": "book.chapter",
    "pk": 68,
    "fields": {
        "book": 2,
        "order": 54,
        "title": "What is a Hero?",
        "markdown": "",
        "html": "",
        "document": "Heroes.md"
    }
},
{
    "model": "book.chapter",
    "pk": 69,
    "fields": {
        "book": 2,
        "order": 55,
        "title": "Life's Greatest Questions",
        "markdown": "",
        "html": "",
        "document": "LifeQuestions.md"
    }
},
{
    "model": "book.chapter",
    "pk": 70,
    "fields": {
        "book": 2,
        "order": 56,
        "title": "To DO and To BE",
        "markdown": "",
        "html": "",
        "document": "DoBe.md"
    }
}
]
